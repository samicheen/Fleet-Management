"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var kinvey_nativescript_sdk_1 = require("kinvey-nativescript-sdk");
var timer_1 = require("tns-core-modules/timer");
var config_1 = require("../../core/config");
var navigation_service_1 = require("./navigation.service");
var network_monitoring_service_1 = require("./network-monitoring.service");
var BackendService = /** @class */ (function () {
    function BackendService(navigationService, networkMonitoringService) {
        this.navigationService = navigationService;
        this.networkMonitoringService = networkMonitoringService;
        this.findResult = {};
        this.syncCollection = {};
        kinvey_nativescript_sdk_1.Kinvey.init(config_1.config.backendConfig);
    }
    BackendService.prototype.setLoggedInChangedObservable = function (value) {
        this.loggedInChangedObservable = value;
    };
    BackendService.prototype.login = function (username, password) {
        var _this = this;
        return kinvey_nativescript_sdk_1.Kinvey.User.login(username, password)
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.loginWithMIC = function (redirectUri, authorizationGrant, options) {
        var _this = this;
        return kinvey_nativescript_sdk_1.Kinvey.User.loginWithMIC(redirectUri, authorizationGrant, options)
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.logout = function () {
        var _this = this;
        return kinvey_nativescript_sdk_1.Kinvey.User.logout()
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.signup = function (username, password, email) {
        var _this = this;
        return kinvey_nativescript_sdk_1.Kinvey.User.signup({ username: username, password: password, email: email })
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.getActiveUser = function () {
        return kinvey_nativescript_sdk_1.Kinvey.User.getActiveUser();
    };
    BackendService.prototype.resetPassword = function (email, options) {
        var _this = this;
        return kinvey_nativescript_sdk_1.Kinvey.User.resetPassword(email, options)
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.save = function (collectionName, item, dataStoreType, options) {
        var _this = this;
        var savePromise = this.getDataStoreCollection(collectionName, dataStoreType)
            .save(item, options)
            .then(function () { return _this.refreshFind(collectionName); })
            .catch(function (e) { return _this.handlePromiseError(e); });
        return this.networkMonitoringService.isOnline ? savePromise : Promise.resolve()
            .then(function () { timer_1.setTimeout(function () { return _this.refreshFind(collectionName); }, 200); });
    };
    BackendService.prototype.refresh = function (collectionName, items) {
        if (!this.findResult[collectionName] || !items) {
            return Promise.resolve();
        }
        var connectableObservable = items.pipe(operators_1.publish());
        connectableObservable.connect();
        this.refreshFind(collectionName);
        return connectableObservable.pipe(operators_1.first()).toPromise();
    };
    BackendService.prototype.filesUpload = function (file, metadata, options) {
        var _this = this;
        return kinvey_nativescript_sdk_1.Kinvey.Files.upload(file, metadata, options)
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.find = function (collectionName, dataStoreType, query, options) {
        var observableResult = this.getDataStoreCollection(collectionName, dataStoreType)
            .find(query, options);
        return this.cacheLast(observableResult, collectionName);
    };
    BackendService.prototype.findById = function (collectionName, id, dataStoreType, options) {
        var observableResult = this.getDataStoreCollection(collectionName, dataStoreType)
            .findById(id, options);
        return this.cacheLast(observableResult, collectionName);
    };
    BackendService.prototype.remove = function (collectionName, dataStoreType, query, options) {
        var _this = this;
        return this.getDataStoreCollection(collectionName, dataStoreType)
            .remove(query, options)
            .then(function () { return _this.refreshFind(collectionName); })
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.removeById = function (collectionName, id, dataStoreType, options) {
        var _this = this;
        return this.getDataStoreCollection(collectionName, dataStoreType)
            .removeById(id, options)
            .then(function () { return _this.refreshFind(collectionName); })
            .catch(function (e) { return _this.handlePromiseError(e); });
    };
    BackendService.prototype.getDataStoreCollection = function (collectionName, dataStoreType) {
        var dataStoreCollection = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection(collectionName, dataStoreType);
        this.sync(collectionName, dataStoreCollection);
        return dataStoreCollection;
    };
    BackendService.prototype.refreshFind = function (collectionName) {
        if (this.findResult[collectionName]) {
            this.findResult[collectionName].next({});
        }
    };
    BackendService.prototype.sync = function (collectionName, dataStoreCollection) {
        var _this = this;
        if (this.syncCollection[collectionName] || !dataStoreCollection.pendingSyncCount)
            return;
        this.syncCollection[collectionName] = this.networkMonitoringService.connectionObservable
            .pipe(operators_1.filter(function (isOnline) { return isOnline; }), operators_1.flatMap(function () { return rxjs_1.from(dataStoreCollection.pendingSyncCount()); }), operators_1.filter(function (count) { return count > 0; }), operators_1.flatMap(function () { return rxjs_1.from(dataStoreCollection.sync()); })).subscribe(function () { return _this.refreshFind(collectionName); }, function (e) { return !_this.handleError(e) && console.error(e.toString()); });
    };
    BackendService.prototype.cacheLast = function (observable, collectionName) {
        var _this = this;
        this.findResult[collectionName] = this.findResult[collectionName] || new rxjs_1.BehaviorSubject({});
        var handleError = function () { return operators_1.catchError(function (e) {
            if (!_this.handleError(e))
                console.error(e.toString());
            return rxjs_1.of(null);
        }); };
        return this.findResult[collectionName].pipe(operators_1.flatMap(function () { return _this.loggedInChangedObservable.pipe(handleError()); }), operators_1.flatMap(function (isLoggedIn) { return isLoggedIn ? observable.pipe(handleError(), operators_1.last(function (value) { return !!value; })) : rxjs_1.of(null); }), operators_1.shareReplay(1));
    };
    BackendService.prototype.handlePromiseError = function (error) {
        this.handleError(error);
        throw error;
    };
    BackendService.prototype.handleError = function (error) {
        if (error instanceof kinvey_nativescript_sdk_1.InvalidCredentialsError || error instanceof kinvey_nativescript_sdk_1.NoActiveUserError) {
            this.navigationService.navigateToModal("login");
            return true;
        }
        return false;
    };
    BackendService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [navigation_service_1.NavigationService,
            network_monitoring_service_1.NetworkMonitoringService])
    ], BackendService);
    return BackendService;
}());
exports.BackendService = BackendService;
//# sourceMappingURL=data:application/json;base64,